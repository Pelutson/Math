<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Erweiterter Euklidischer Algorithmus</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #4CAF50 0%, #2196F3 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .content {
            padding: 30px;
        }

        .input-section {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 30px;
            border-left: 5px solid #4CAF50;
        }

        .input-group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .input-field {
            display: flex;
            flex-direction: column;
        }

        .input-field label {
            font-weight: bold;
            margin-bottom: 8px;
            color: #333;
        }

        .input-field input {
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .input-field input:focus {
            outline: none;
            border-color: #4CAF50;
        }

        .button-group {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }

        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #4CAF50;
            color: white;
        }

        .btn-primary:hover {
            background: #45a049;
            transform: translateY(-2px);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .btn-info {
            background: #17a2b8;
            color: white;
        }

        .btn-info:hover {
            background: #138496;
            transform: translateY(-2px);
        }

        .examples {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
        }

        .examples h3 {
            margin-bottom: 10px;
            color: #333;
        }

        .example-btn {
            background: #e9ecef;
            color: #333;
            border: 1px solid #ced4da;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
            transition: all 0.3s;
        }

        .example-btn:hover {
            background: #dee2e6;
            transform: translateY(-1px);
        }

        .results {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 30px;
            margin-top: 30px;
        }

        .steps-container {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            border-left: 5px solid #2196F3;
        }

        .step-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .step-navigation h2 {
            color: #333;
        }

        .nav-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .nav-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .nav-btn:hover:not(:disabled) {
            background: #5a6268;
        }

        .nav-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .step-indicator {
            background: #e3f2fd;
            color: #1976d2;
            padding: 8px 15px;
            border-radius: 5px;
            font-weight: bold;
        }

        .step-card {
            background: white;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s;
        }

        .step-card.active {
            border-color: #4CAF50;
            background: #f1f8e9;
            box-shadow: 0 4px 15px rgba(76, 175, 80, 0.2);
        }

        .step-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
        }

        .step-number {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #6c757d;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 18px;
        }

        .step-card.active .step-number {
            background: #4CAF50;
        }

        .step-title {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
        }

        .step-description {
            background: white;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 1.1rem;
            border: 1px solid #ddd;
            margin-bottom: 10px;
        }

        .step-detail {
            color: #666;
            font-style: italic;
            margin-bottom: 10px;
        }

        .step-extra {
            background: #fff3cd;
            padding: 10px;
            border-radius: 5px;
            border-left: 4px solid #ffc107;
            font-size: 0.9rem;
        }

        .step-verification {
            background: #d4edda;
            padding: 10px;
            border-radius: 5px;
            border-left: 4px solid #28a745;
            font-size: 0.9rem;
        }

        .summary {
            background: #f8f9fa;
            padding: 25px;
            border-radius: 15px;
            border-left: 5px solid #28a745;
            height: fit-content;
        }

        .summary h3 {
            color: #333;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .result-box {
            background: white;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }

        .result-box.success {
            background: #d4edda;
            border-color: #c3e6cb;
        }

        .result-box.info {
            background: #cce5ff;
            border-color: #b3d7ff;
        }

        .result-box.warning {
            background: #fff3cd;
            border-color: #ffeaa7;
        }

        .table-container {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            margin-top: 15px;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table th {
            background: #f8f9fa;
            font-weight: bold;
        }

        .table tr.active {
            background: #e3f2fd;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 80%;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .modal-header h2 {
            color: #333;
            font-size: 2rem;
        }

        .theory-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 5px solid #4CAF50;
        }

        .theory-section h3 {
            color: #333;
            margin-bottom: 15px;
        }

        .theory-section ul {
            margin-left: 20px;
        }

        .theory-section li {
            margin-bottom: 5px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .input-group {
                grid-template-columns: 1fr;
            }
            
            .results {
                grid-template-columns: 1fr;
            }
            
            .button-group {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧮 Erweiterter Euklidischer Algorithmus</h1>
            <p>Schritt-für-Schritt Berechnung mit interaktiver Anzeige</p>
        </div>

        <div class="content">
            <div class="input-section">
                <div class="input-group">
                    <div class="input-field">
                        <label for="inputA">Erste Zahl (a):</label>
                        <input type="number" id="inputA" placeholder="z.B. 252">
                    </div>
                    <div class="input-field">
                        <label for="inputB">Zweite Zahl (b):</label>
                        <input type="number" id="inputB" placeholder="z.B. 105">
                    </div>
                </div>

                <div class="button-group">
                    <button class="btn btn-primary" onclick="calculate()">
                        🧮 Berechnen
                    </button>
                    <button class="btn btn-secondary" onclick="reset()">
                        🔄 Zurücksetzen
                    </button>
                    <button class="btn btn-info" onclick="showTheory()">
                        📚 Theorie
                    </button>
                </div>

                <div class="examples">
                    <h3>Beispiele:</h3>
                    <button class="example-btn" onclick="loadExample(252, 105)">252, 105</button>
                    <button class="example-btn" onclick="loadExample(48, 18)">48, 18</button>
                    <button class="example-btn" onclick="loadExample(17, 5)">17, 5</button>
                    <button class="example-btn" onclick="loadExample(100, 25)">100, 25</button>
                    <button class="example-btn" onclick="loadExample(1071, 462)">1071, 462</button>
                </div>
            </div>

            <div id="results" class="results hidden">
                <div class="steps-container">
                    <div class="step-navigation">
                        <h2>Schritt-für-Schritt Berechnung</h2>
                        <div class="nav-controls">
                            <button class="nav-btn" onclick="prevStep()">← Zurück</button>
                            <span class="step-indicator" id="stepIndicator">1 / 1</span>
                            <button class="nav-btn" onclick="nextStep()">Weiter →</button>
                        </div>
                    </div>
                    <div id="stepsContainer"></div>
                </div>

                <div class="summary">
                    <h3>✅ Endergebnis</h3>
                    <div id="summaryContent"></div>
                    
                    <h3 style="margin-top: 20px;">📊 Tabellen-Übersicht</h3>
                    <div class="table-container">
                        <table class="table" id="resultsTable">
                            <thead>
                                <tr>
                                    <th>Schritt</th>
                                    <th>a</th>
                                    <th>b</th>
                                    <th>q</th>
                                    <th>r</th>
                                </tr>
                            </thead>
                            <tbody id="tableBody"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Theory Modal -->
    <div id="theoryModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeTheory()">&times;</span>
            <div class="modal-header">
                <h2>🎯 Erweiterter Euklidischer Algorithmus</h2>
            </div>
            
            <div class="theory-section">
                <h3>🎯 Ziel:</h3>
                <p>Für zwei ganze Zahlen a und b finde ganze Zahlen x und y, sodass:</p>
                <div style="text-align: center; font-family: monospace; font-size: 1.2em; margin: 15px 0; padding: 10px; background: white; border-radius: 5px;">
                    ax + by = gcd(a, b)
                </div>
            </div>

            <div class="theory-section">
                <h3>📚 Grundlagen:</h3>
                <ul>
                    <li>Der normale euklidische Algorithmus findet nur gcd(a, b)</li>
                    <li>Der erweiterte Algorithmus findet zusätzlich die Koeffizienten x und y</li>
                    <li>Diese Koeffizienten heißen "Bézout-Koeffizienten"</li>
                </ul>
            </div>

            <div class="theory-section">
                <h3>🔄 Algorithmus-Schritte:</h3>
                <ol>
                    <li>Initialisierung: x₀=1, x₁=0, y₀=0, y₁=1</li>
                    <li>Für jeden Schritt der euklidischen Division:
                        <ul>
                            <li>Berechne q = a ÷ b (Quotient)</li>
                            <li>Berechne r = a mod b (Rest)</li>
                            <li>Update: a = b, b = r</li>
                            <li>Update Koeffizienten: x₂ = x₀ - q × x₁, y₂ = y₀ - q × y₁</li>
                        </ul>
                    </li>
                    <li>Stoppe wenn b = 0</li>
                </ol>
            </div>

            <div class="theory-section">
                <h3>💡 Anwendungen:</h3>
                <ul>
                    <li>Lösung von Diophantischen Gleichungen</li>
                    <li>Modulare Arithmetik</li>
                    <li>Kryptographie (RSA)</li>
                    <li>Berechnung modularer Inverse</li>
                </ul>
            </div>

            <button class="btn btn-primary" onclick="closeTheory()" style="width: 100%; margin-top: 20px;">
                Schließen
            </button>
        </div>
    </div>

    <script>
        let steps = [];
        let currentStep = 0;
        let result = null;

        function calculateExtendedGCD(a, b) {
            if (a === 0 && b === 0) {
                throw new Error("a und b können nicht beide 0 sein");
            }

            const originalA = a;
            const originalB = b;
            const stepsList = [];

            stepsList.push({
                step: 0,
                action: 'Initialisierung',
                description: `Gegeben: a = ${a}, b = ${b}`,
                detail: 'Wir suchen x und y, sodass ax + by = gcd(a,b)',
                a: a, b: b,
                oldX: 1, x: 0, oldY: 0, y: 1,
                quotient: null, remainder: null
            });

            let oldX = 1, x = 0;
            let oldY = 0, y = 1;
            let stepNum = 1;

            while (b !== 0) {
                const quotient = Math.floor(a / b);
                const remainder = a % b;

                stepsList.push({
                    step: stepNum,
                    action: 'Division',
                    description: `${a} = ${quotient} × ${b} + ${remainder}`,
                    detail: `Teile ${a} durch ${b}: Quotient = ${quotient}, Rest = ${remainder}`,
                    a: a, b: b,
                    oldX: oldX, x: x, oldY: oldY, y: y,
                    quotient: quotient, remainder: remainder
                });

                a = b;
                b = remainder;

                const newX = oldX - quotient * x;
                const newY = oldY - quotient * y;

                stepNum++;

                if (b !== 0) {
                    stepsList.push({
                        step: stepNum,
                        action: 'Koeffizienten-Update',
                        description: `x = ${oldX} - ${quotient} × ${x} = ${newX}`,
                        detail: `y = ${oldY} - ${quotient} × ${y} = ${newY}`,
                        a: a, b: b,
                        oldX: oldX, x: x, oldY: oldY, y: y,
                        quotient: quotient, remainder: remainder,
                        newX: newX, newY: newY
                    });
                }

                oldX = x;
                x = newX;
                oldY = y;
                y = newY;
                stepNum++;
            }

            const gcdResult = Math.abs(a);
            let finalX = oldX;
            let finalY = oldY;

            if (originalA < 0) finalX = -finalX;
            if (originalB < 0) finalY = -finalY;

            stepsList.push({
                step: stepNum,
                action: 'Endergebnis',
                description: `gcd(${originalA}, ${originalB}) = ${gcdResult}`,
                detail: `Koeffizienten: x = ${finalX}, y = ${finalY}`,
                verification: `${originalA} × ${finalX} + ${originalB} × ${finalY} = ${originalA * finalX + originalB * finalY}`,
                a: gcdResult, b: 0,
                oldX: finalX, x: 0, oldY: finalY, y: 0,
                quotient: null, remainder: null
            });

            return { gcd: gcdResult, x: finalX, y: finalY, steps: stepsList };
        }

        function calculate() {
            const a = parseInt(document.getElementById('inputA').value);
            const b = parseInt(document.getElementById('inputB').value);

            if (isNaN(a) || isNaN(b)) {
                alert("Bitte geben Sie gültige Zahlen ein!");
                return;
            }

            try {
                result = calculateExtendedGCD(a, b);
                steps = result.steps;
                currentStep = 0;
                displayResults();
            } catch (error) {
                alert(error.message);
            }
        }

        function displayResults() {
            document.getElementById('results').classList.remove('hidden');
            updateStepsDisplay();
            updateSummary();
            updateTable();
        }

        function updateStepsDisplay() {
            const container = document.getElementById('stepsContainer');
            container.innerHTML = '';

            steps.forEach((step, index) => {
                const stepCard = document.createElement('div');
                stepCard.className = `step-card ${index === currentStep ? 'active' : ''}`;
                
                let extraContent = '';
                if (step.action === 'Koeffizienten-Update') {
                    extraContent = `<div class="step-extra">📝 Neue Koeffizienten: x = ${step.newX}, y = ${step.newY}</div>`;
                }
                if (step.action === 'Endergebnis' && step.verification) {
                    extraContent = `<div class="step-verification">✅ Verifikation: ${step.verification}</div>`;
                }

                stepCard.innerHTML = `
                    <div class="step-header">
                        <div class="step-number">${step.step}</div>
                        <div class="step-title">${step.action}</div>
                    </div>
                    <div class="step-description">${step.description}</div>
                    <div class="step-detail">💡 ${step.detail}</div>
                    ${extraContent}
                `;

                container.appendChild(stepCard);
            });

            document.getElementById('stepIndicator').textContent = `${currentStep + 1} / ${steps.length}`;
        }

        function updateSummary() {
            const content = document.getElementById('summaryContent');
            content.innerHTML = `
                <div class="result-box success">
                    <strong>GCD: ${result.gcd}</strong>
                </div>
                <div class="result-box info">
                    <strong>x = ${result.x}</strong><br>
                    <strong>y = ${result.y}</strong>
                </div>
                <div class="result-box warning">
                    <small>Verifikation:</small><br>
                    <code>${document.getElementById('inputA').value} × ${result.x} + ${document.getElementById('inputB').value} × ${result.y} = ${parseInt(document.getElementById('inputA').value) * result.x + parseInt(document.getElementById('inputB').value) * result.y}</code>
                </div>
            `;
        }

        function updateTable() {
            const tbody = document.getElementById('tableBody');
            tbody.innerHTML = '';

            const divisionSteps = steps.filter(step => step.action === 'Initialisierung' || step.action === 'Division');
            
            divisionSteps.forEach((step, index) => {
                const row = document.createElement('tr');
                row.className = index === Math.floor(currentStep / 2) ? 'active' : '';
                
                row.innerHTML = `
                    <td>${step.step}</td>
                    <td>${step.a}</td>
                    <td>${step.b}</td>
                    <td>${step.quotient || '-'}</td>
                    <td>${step.remainder !== null ? step.remainder : '-'}</td>
                `;
                
                tbody.appendChild(row);
            });
        }

        function nextStep() {
            if (currentStep < steps.length - 1) {
                currentStep++;
                updateStepsDisplay();
                updateTable();
            }
        }

        function prevStep() {
            if (currentStep > 0) {
                currentStep--;
                updateStepsDisplay();
                updateTable();
            }
        }

        function reset() {
            document.getElementById('inputA').value = '';
            document.getElementById('inputB').value = '';
            document.getElementById('results').classList.add('hidden');
            steps = [];
            currentStep = 0;
            result = null;
        }

        function loadExample(a, b) {
            document.getElementById('inputA').value = a;
            document.getElementById('inputB').value = b;
        }

        function showTheory() {
            document.getElementById('theoryModal').style.display = 'block';
        }

        function closeTheory() {
            document.getElementById('theoryModal').style.display = 'none';
        }

        // Modal schließen wenn außerhalb geklickt wird
        window.onclick = function(event) {
            const modal = document.getElementById('theoryModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            if (steps.length > 0) {
                if (event.key === 'ArrowRight') nextStep();
                if (event.key === 'ArrowLeft') prevStep();
            }
        });
    </script>
</body>
</html>
